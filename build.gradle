buildscript {
    ext {
        grailsVersion = project.grailsVersion
        gormVersion = project.gormVersion
        esVersion = project.elasticsearchVersion
    }
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/grails/core' }
        maven { url 'https://artifacts.elastic.co/maven' }
        jcenter()
//        mavenCentral()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath "org.grails.plugins:hibernate5:${gormVersion - ".RELEASE"}"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.25.0'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    //id 'maven-publish'
    id "de.undercouch.download" version "4.0.0"
    id "cgoit.gradle.elasticsearch" version "0.2.2"
    id "com.dorongold.task-tree" version "1.5"
}

version projectVersion
group "grails.plugins"

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: 'maven-publish'
apply plugin: 'com.github.ben-manes.versions'

ext {
    gradleWrapperVersion = project.gradleWrapperVersion
    esVersion = project.elasticsearchVersion
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    maven { url 'https://repo.grails.org/grails/core' }
    maven { url 'https://artifacts.elastic.co/maven' }
    jcenter()
    mavenCentral()
}

allprojects { proj ->
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.elasticsearch:elasticsearch') with module("org.elasticsearch:elasticsearch:${esVersion}")
            }
        }
    }

    tasks.withType(JavaCompile) {
        //I don't believe those warnings add value given modern IDEs
        options.warnings = false
        options.encoding = 'UTF-8'
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

jar {
    exclude "test/**"
    exclude "test/**/**"
}

groovydoc {
    exclude "test/**"
    exclude "test/**/**"
}

//sourcesJar {
//    exclude "test/**"
//    exclude "test/**/**"
//
//    classifier = 'sources'
//}

dependencies {
    provided 'org.springframework.boot:spring-boot-starter-logging'
    provided "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    provided "org.grails:grails-web-boot"
    provided "org.grails:grails-dependencies"

    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"

    compile "org.grails:grails-core"
    compile "org.grails.plugins:hibernate5"
    compile "org.grails.plugins:cache"
    compile "org.hibernate:hibernate-ehcache"

    compile "org.apache.logging.log4j:log4j-api:2.13.3"

    compile "org.elasticsearch:elasticsearch:${esVersion}"
    compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:${esVersion}"
    compile "org.locationtech.spatial4j:spatial4j:0.6"

    console "org.grails:grails-console"

    profile "org.grails.profiles:web-plugin"

    testRuntime "com.spatial4j:spatial4j:0.4.1"
    testRuntime "org.apache.tomcat:tomcat-jdbc"
    testRuntime "org.apache.logging.log4j:log4j-core:2.13.3"

    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"

    testCompile "com.vividsolutions:jts:1.13"
    testCompile "com.googlecode.json-simple:json-simple:1.1.1"
}

task cleanLibsDir(type: Delete) {
    delete fileTree(dir: 'libs')
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

check.doLast {
    cleanDataDir.execute()
}

clean.doLast {
    cleanDataDir.execute()
    cleanLibsDir.execute()
}

task cleanDataDir(type: Delete) {
    delete fileTree(dir: 'data')
}

integrationTest {
    doFirst {
        startElasticsearch {
            elasticsearchVersion = esVersion
            httpHost = "localhost"
            httpPort = 9200
            transportPort = 9300
            dataDir = file("$buildDir/elastic")
            logsDir = file("$buildDir/elastic/logs")
        }
    }

    doLast {
        stopElasticsearch {
            httpHost = "localhost"
            httpPort = 9200
        }
    }
}

gradle.taskGraph.afterTask { Task task, TaskState taskState ->
    if (task.name == "integrationTest") {
        stopElasticsearch {
            httpHost = "localhost"
            httpPort = 9200
        }
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}
// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false

apply from: "gradle/documentation.gradle"

apply from: "gradle/publish.gradle"

// dependency update plugin
dependencyUpdates {
    checkForGradleUpdate = false

    resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}
